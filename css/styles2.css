.orders {
  background-color: #fff; /* колір фону */
  color: rgb(0, 0, 0); /* колір */
  color: tomato !important; /* підвищує значимість*/
  color: inherit; /* успадкувати від батька колір */
  color: currentColor; /* колір такий як і навколо */
  font-family: 'Helvetica Neue', sans-serif; /* шрифт і сімейство шрифтів */
  font-size: 20px; /* розмір шрифту */
  font-weight: 400; /* жирність літер */
  font-style: italic; /* тип написання тексту (курсивом) */
  text-decoration: none; /* ефекти оформлення тексту: нижнє і верхнє підкреслення, а також закреслення */
  text-transform: uppercase; /* регістр символів у тексті, зробити всі літери великими або маленькими */
  text-align: left; /* керує вирівнюванням текстового вмісту по горизонталі */
  line-height: normal; /* встановлює міжрядковий інтервал (інтерліньяж, висоту рядка) тексту */
  letter-spacing: normal; /* визначає інтервал між символами (літерами) */
  text-indent: 0%; /* становлює величину відступу першого рядка текстового блоку, наприклад абзацу */
  text-shadow: 2px 2px 4px black; /* контролює тінь тексту, а також задає її параметри: зміщення по x, y, радіус розмиття, колір */
  list-style-type: none; /* визначає тип маркера списку */
  box-sizing: border-box /*content-box inherit*/; /*content-box — властивості width іheight задають ширину і висоту області вмісту і не включають розміри полів (padding), рамок (border) і відступів (margin). Це значення за замовчуванням.
border-box — властивості width іheight задають кінцевий розмір елемента і включають значення полів (padding), рамок (border), але не зовнішніх відступів (margin).
inherit — успадковує значення блокової моделі батьківського елемента.*/
  padding: 5px /*top right bottom left*/; /* відстань між контентом і рамкою*/
  margin: 5px; /*зовнішні відступи від рамки до сусідніх елементів*/
  margin: 0 auto; /*відцентровує блочний елемент*/
  border: 2px solid black; /*ширинf, стиль і колір рамки елемента*/
  border-color: black; /*колір рамки*/
  border-style: dashed; /*стиль рамки*/
  border-width: 40px; /*товщина рамки*/
  border-top: 2px solid black; /*рамка з одного боку*/
  border-radius: 10px; /*заокруглює кути рамки*/
  border-top-left-radius: 20%; /*заокруглює лише один кут*/
  overflow: hidden; /*visible (видно) | hidden (прихований) | scroll (скрол) | auto (скрабли тільки що потрібні) контролює видимість контенту що виходить за рамку: приховує (заокругленої)*/
  overflow-x: visible; /*overflow-y контролюють переповнення тільки у відповідній площині*/
  display: inline; /*(inline-block - Рядково-блокові елементи) змінює тип відображення елемента*/
  display: none; /*дозволяє повністю приховати елемент, звільнивши його простір для інших. Такий елемент вилучається з потоку документа, візуально приховується й відсутній у розкладці сторінки*/
  max-width: 100%; /*властивість максимальної ширини*/
  object-fit: fill; /*(зображення масштабується без збереження пропорцій, щоб повністю заповнити контейнер. Значення за замовчуванням 
  | contain - зображення масштабується зі збереженням пропорцій, щоб максимально заповнити контейнер
  | cover- зображення масштабується зі збереженням пропорцій, щоб повністю заповнити контейнер 
  | scale-down - буде вибрано значення none або contain, щоб зображення було найменшого розміру. Мета — вмістити все зображення без зміни пропорцій
  | none - зберігаються вихідні розміри зображення, задана висота та ширина не мають жодного ефекту) 
   визначає яким чином вміст елемента img буде вміщатися в контейнер, коли розміри чи пропорції зображення та контейнера не збігаються*/
  flex-direction: row; /*Напрямок main axis (Головна вісь)
  | row - вісь починається зліва й закінчується праворуч. Це значення за замовчуванням
  | row-reverse - вісь починається праворуч й закінчується ліворуч
  | column - вісь починається праворуч й закінчується ліворуч
  | column-reverse - головна вісь розташовується вертикально, початок знизу, кінець зверху */
  display: flex; /*| inline-flex створює flex-контейнер: блоковий або рядково-блоковий*/
  gap: 8px; /*проміжок між flex-елементами*/
  row-gap: 8px; /*column-gap дозволяють окремо задати розміри проміжків між рядками та стовпцями сітки*/
  justify-content: flex-start; /*керує позиціонуванням елементів на головній осі, від main-start до main-end
  | flex-start -  елементи притискаються до точки main-start головної осі. Це значення за замовчуванням
  | flex-end - елементи притискаються до точки main-end головної осі
  | center - елементи центруються на осі
  | space-between - елементи рівномірно розподіляються на головній осі. Перший елемент встановлюється на початок осі, а останній на кінець 
  | space-around - елементи розподіляються рівномірно, але лівий та правий елементи розташовані на відстані від рамок контейнера на половину проміжку між іншими елементами
  | space-evenly - елементи розподіляються так, що відстань між елементами та від крайніх елементів до меж контейнера однакова*/
  align-items: stretch; /*керує розташуванням елементів вздовж поперечної осі cross axis. Це аналог justify-content тільки для іншої осі
| stretch - елементи розтягуються по всій довжині осі cross axis. Це значення за замовчуванням
| flex-start - елементи притискаються до точки cross start
| flex-end - елементи притискаються до точки cross end 
| center - елементи центруються по осі cross axis
| baseline - елементи вирівнюються по базовій лінії їхнього текстового вмісту*/
  align-content: flex-start; /*Керує вирівнюванням усіх рядків багаторядкового контейнера уздовж cross axis, якщо є вільне місце
| flex-start - рядки притискаються до старту cross axis
| flex-end - рядки притискаються до кінця cross axis
| center - рядки центруються на осі cross axis
  Значення space-between, space-around і space-evenly працюють аналогічно властивості justify-content, тільки для рядків, і використовуються рідко
| stretch - рядки рівномірно розтягуються, щоб зайняти все місце. Значення за замовчуванням*/
  flex-wrap: nowrap; /*перетворює однорядковий контейнер на багаторядковий. Елементи будуть додаватися в рядок, доки в ньому буде місце, після чого буде автоматично створено ще один рядок 
| nowrap - усі елементи будуть на одному рядку. Це значення за замовчуванням
| wrap - дозволяє елементам перестрибувати на інші рядки, які за замовчуванням розташовуються зверху вниз (уздовж cross axis)
| wrap-reverse -  дозволяє елементам перестрибувати на інші рядки, які розташовуються знизу вгору (уздовж cross axis)*/
  width: calc(
    (100% - 20px) / 3
  ); /*100% - кількість_проміжків_у_рядку * значення_одного_проміжку) / кількість_елементів_у_рядку*/
  flex-basis: auto; /*визначає початковий розмір flex-елемента у flex-контейнері*/
  flex-grow: 1; /*визначає здатність елемента займати більше місця (рости), ніж початковий розмір*/
  flex-shrink: 0; /*визначає здатність flex-елемента займати менше місця (стискатися), ніж його початковий розмір, тобто впливає на фінальний розмір елемента*/
  min-height: 100vh; /*vh (viewport height — відсоток від висоти області перегляду 5vh = 5% висоти)*/
  align-self: auto; /*дозволяє елементу змінити своє розташування на cross axis, перевизначивши собі значення властивості align-items від контейнера*/
  order: 0; /*можна візуально змінити порядок розташування елементів уздовж main axis*/
  background-image: url(шлях до зображення); /*задає фонове зображення елемента, адреса якого вказується аргументом функції url(). Це може бути як відносний, так і абсолютний шлях*/
  background-image: linear-gradient(
      to bottom,
      rgba(255, 0, 0, 0.3),
      rgba(255, 0, 0, 0.3)
    ),
    url(шлях до зображення); /*техніку подвійного фону, коли над зображенням розташовується шар кольору із прозорістю.*/
  background-repeat: repeat; /*керує повторенням фонового зображення. За замовчуванням воно повторюється по горизонталі (X) та вертикалі (Y). Це відбувається, якщо зображення менше ніж розмір елемента.*/
  /*repeat — повторювати X і Y. Значення за замовчуванням.
repeat-x — повторювати тільки X, тобто по горизонталі.
repeat-y — повторювати тільки Y, тобто по вертикалі.
no-repeat — не повторювати*/
  background-position: x y; /*керує положенням фонового зображення відносно рамки елемента, використовуючи дві координати — x по горизонталі і y по вертикалі*/
  background-size: auto; /*властивість дозволяє коригувати розміри зображення шляхом налаштування необхідної ширини та висоти*/
  /*cover — за рахунок обрізання зайвого.
contain — за рахунок утворення порожнього простору в контейнері.*/
  box-shadow: <x-offset> <y-offset> <blur> <spread> <color>; /*додає тінь елементу*/
  /*inset - внутрішня тінь,
  x-offset — горизонтальне зміщення. Позитивне значення зміщує тінь праворуч від блоку, негативне – ліворуч. Обов'язкове значення.
y-offset — вертикальне зміщення. Позитивне значення зміщує тінь вниз, негативне - вгору. Обов'язкове значення.
blur — радіус розмиття. Чим більше значення, тим сильніше розмита тінь. Необов'язкове значення.
spread — радіус поширення. Позитивне значення збільшує тінь, негативне — зменшує. Необов'язкове значення.
color — колір тіні. Можна використовувати будь-який формат запису кольору. Необов'язкове значення.*/
  fill: #2a2a2a; /*керує кольором заливки svg зображень (іконок)*/
  content: ''; /*дозволяє додати текстовий контент всередину псевдоелемента. Ця властивість є обов’язковою, без неї браузер просто не створить псевдоелемент*/
  position: static; /*змінює тип позиціонування елемента. Вона дозволяє буквально підняти елемент і розмістити його поверх будь-якого іншого*/
  top: 120px;
  left: 120px;
  /*relative - елемент залишається у потоці сторінки, тобто сусідні елементи не займають його місце. Проте візуально елемент можна змістити щодо його первісного положення. При цьому він може перекривати сусідів.
  absolute - елемент вилучається з потоку сторінки, тобто сусідні елементи займають його місце, Щоб визначити точку відліку, браузер шукає найближчий елемент-предок, у якого властивість position має будь-яке значення крім static. Якщо такого предка не виявиться, то відлік буде починатися від рамки елемента <body>
  fixed - елемент вилучається із потоку сторінки та позиціонується відносно в'юпорту. Це створює ефект фіксації елемента у певному місці екрана під час прокручування сторінки.
  sticky - комбінація властивостей relative і fixed. Поки елемент знаходиться у своєму контейнері, і контейнер не виходить з області видимості при вертикальному прокручуванні — елемент поводиться як позиціонований відносно (relative).Як тільки частина батьківського контейнера виходить із області видимості, елемент фіксується на сторінці до тих пір, поки хоча б якась частина контейнера присутня на екрані.*
  z-index: 2; /*позиціонованих елементів на сторінці по осі z*/
  transition-property: background-color; /*задає властивості, до яких буде застосовано ефект переходу. Значенням може бути одна властивість або список властивостей через кому.
Значення за замовчуванням — all, тобто анімуються всі можливі властивості*/
  transition-duration: 2s; /*задає проміжок часу, протягом якого має здійснитися перехід*/
  transition-timing-function: linear; /*задає функцію розподілу часу, тобто поведінку анімації*/
  /* ease — перехід починається повільно, швидко прискорюється, а потім знову сповільнюється в кінці.
linear — перехід має рівномірну швидкість.
ease-in — починається повільно, швидкість переходу збільшується до повного завершення переходу.
ease-out — починається швидко, уповільнюється протягом переходу.
ease-in-out — починається повільно, прискорюється, а потім знову сповільнюється. */
  transition-delay: 500ms; /*визначає затримку, після якої розпочинається анімація переходу. За замовчуванням встановлено значення 0s*/
  transition: property duration timing-function delay; /*Всі властивості переходу можна поєднати в одну складову властивість */
  transform: scale(
    1.15
  ); /*відповідає за застосування однієї або більше трансформацій елемента*/
  /* scaleX(tx), scaleY(ty) і scale(tx, ty) масштабують блок по ширині та/або висоті, не впливаючи на геометрію навколишніх елементів. Якщо для scale() задано певне значення, друге буде таким самим 
  rotate(кут) повертає елементи на задану кількість градусів (одиниця deg). Позитивні значення повертають елемент за годинниковою стрілкою, негативні — проти.
Значення можна передати не лише в градусах, а й в «обертах» (одиниця turn)
translateX(tx), translateY(ty) і translate(tx, ty) (px i %) переміщають елемент у горизонтальному (вісь X) та/або вертикальному (вісь Y) напрямках щодо початкового положення.
Позитивні значення X зміщують елемент праворуч, негативні — ліворуч.
Позитивні значення Y зміщують елемент вниз, негативні — вгору
skewX(кут), skewY(кут) і skew(x-кут, y-кут) використовуються для визначення параметрів викривлення (нахилу, деформування) сторін елемента відносно координатних осей. Якщо для skew() вказано тільки одне значення, друге буде дорівнювати 0, тобто це буде аналог skewX()*/
  overflow: hidden; /*використовуються при створенні декоративних ефектів з появою прихованого вмісту з-за меж блоку*/
  resize: both | horizontal | vertical | none; /*контролювати можливість зміни розміру користувачем*/
}
